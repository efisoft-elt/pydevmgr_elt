
# This file was autogenerated do not Edit !!!!!!
# instead import and subclass the Device class 

from pydevmgr_elt.base import EltDevice
from pydevmgr_core import Defaults as RD
from pydevmgr_core import NodeVar
from typing import Any 

N = EltDevice.Node

CN = EltDevice.Node.Config
CI = EltDevice.Interface.Config
CR = EltDevice.Rpc.Config


class CcsSimCfgConfig(EltDevice.Cfg.Config):
    latitude: RD[CN] = CN(suffix='cfg.site.latitude', parser='Float')
    longitude: RD[CN] = CN(suffix='cfg.site.longitude', parser='Float')



class CcsSimCfgData(EltDevice.Cfg.Data):
    latitude: NodeVar[Any] = None
    longitude: NodeVar[Any] = None


class CcsSimCfg(EltDevice.Cfg):
    Config = CcsSimCfgConfig
    Data = CcsSimCfgData
    latitude = N.prop('latitude')
    longitude = N.prop('longitude')



class CcsSimCtrlConfig(EltDevice.Interface.Config):
    dut: RD[CN] = CN(suffix='ctrl.dut' )
    humidity: RD[CN] = CN(suffix='ctrl.environment.humidity' )
    lapserate: RD[CN] = CN(suffix='ctrl.environment.lapserate' )
    pressure: RD[CN] = CN(suffix='ctrl.environment.pressure' )
    temperature: RD[CN] = CN(suffix='ctrl.environment.temperature' )
    wavelength: RD[CN] = CN(suffix='ctrl.wavelength' )



class CcsSimCtrlData(EltDevice.Interface.Data):
    dut: NodeVar[Any] = None
    humidity: NodeVar[Any] = None
    lapserate: NodeVar[Any] = None
    pressure: NodeVar[Any] = None
    temperature: NodeVar[Any] = None
    wavelength: NodeVar[Any] = None


class CcsSimCtrl(EltDevice.Interface):
    Config = CcsSimCtrlConfig
    Data = CcsSimCtrlData
    dut = N.prop('dut')
    humidity = N.prop('humidity')
    lapserate = N.prop('lapserate')
    pressure = N.prop('pressure')
    temperature = N.prop('temperature')
    wavelength = N.prop('wavelength')



class CcsSimRpcsConfig(EltDevice.Rpcs.Config):
    rpcSetCoordinates: RD[CR] = CR(suffix= 'RPC_SetCoordinates', arg_parsers=['Float', 'Float', 'Float'] )



class CcsSimRpcsData(EltDevice.Rpcs.Data):
    pass


class CcsSimRpcs(EltDevice.Rpcs):
    Config = CcsSimRpcsConfig
    Data = CcsSimRpcsData



class CcsSimStatConfig(EltDevice.Stat.Config):
    alpha: RD[CN] = CN(suffix='stat.observed.alpha' )
    alt: RD[CN] = CN(suffix='stat.data.alt' )
    alt_deg: RD[CN] = CN(suffix='stat.data.alt_deg' )
    apparent_alpha: RD[CN] = CN(suffix='stat.apparent.alpha' )
    apparent_delta: RD[CN] = CN(suffix='stat.apparent.delta' )
    az: RD[CN] = CN(suffix='stat.data.az' )
    az_deg: RD[CN] = CN(suffix='stat.data.az_deg' )
    dc_time: RD[CN] = CN(suffix='stat.lDcTime' )
    dec: RD[CN] = CN(suffix='stat.data.dec' )
    delta: RD[CN] = CN(suffix='stat.observed.delta' )
    ha: RD[CN] = CN(suffix='stat.data.ha' )
    humidity: RD[CN] = CN(suffix='stat.environment.humidity' )
    lapserate: RD[CN] = CN(suffix='stat.environment.lapserate' )
    lst: RD[CN] = CN(suffix='stat.data.lst' )
    pa: RD[CN] = CN(suffix='stat.data.pa' )
    pa_deg: RD[CN] = CN(suffix='stat.data.pa_deg' )
    pressure: RD[CN] = CN(suffix='stat.environment.pressure' )
    ra: RD[CN] = CN(suffix='stat.data.ra' )
    rotation: RD[CN] = CN(suffix='stat.data.rotation' )
    rotation_deg: RD[CN] = CN(suffix='stat.data.rotation_deg' )
    sdc_time: RD[CN] = CN(suffix='stat.sDcTime' )
    temperature: RD[CN] = CN(suffix='stat.environment.temperature' )
    time_mode: RD[CN] = CN(suffix='stat.nTimeMode' )
    zd: RD[CN] = CN(suffix='stat.observed.zd' )



class CcsSimStatData(EltDevice.Stat.Data):
    alpha: NodeVar[Any] = None
    alt: NodeVar[Any] = None
    alt_deg: NodeVar[Any] = None
    apparent_alpha: NodeVar[Any] = None
    apparent_delta: NodeVar[Any] = None
    az: NodeVar[Any] = None
    az_deg: NodeVar[Any] = None
    dc_time: NodeVar[Any] = None
    dec: NodeVar[Any] = None
    delta: NodeVar[Any] = None
    ha: NodeVar[Any] = None
    humidity: NodeVar[Any] = None
    lapserate: NodeVar[Any] = None
    lst: NodeVar[Any] = None
    pa: NodeVar[Any] = None
    pa_deg: NodeVar[Any] = None
    pressure: NodeVar[Any] = None
    ra: NodeVar[Any] = None
    rotation: NodeVar[Any] = None
    rotation_deg: NodeVar[Any] = None
    sdc_time: NodeVar[Any] = None
    temperature: NodeVar[Any] = None
    time_mode: NodeVar[int] = 0
    zd: NodeVar[Any] = None


class CcsSimStat(EltDevice.Stat):
    Config = CcsSimStatConfig
    Data = CcsSimStatData
    alpha = N.prop('alpha')
    alt = N.prop('alt')
    alt_deg = N.prop('alt_deg')
    apparent_alpha = N.prop('apparent_alpha')
    apparent_delta = N.prop('apparent_delta')
    az = N.prop('az')
    az_deg = N.prop('az_deg')
    dc_time = N.prop('dc_time')
    dec = N.prop('dec')
    delta = N.prop('delta')
    ha = N.prop('ha')
    humidity = N.prop('humidity')
    lapserate = N.prop('lapserate')
    lst = N.prop('lst')
    pa = N.prop('pa')
    pa_deg = N.prop('pa_deg')
    pressure = N.prop('pressure')
    ra = N.prop('ra')
    rotation = N.prop('rotation')
    rotation_deg = N.prop('rotation_deg')
    sdc_time = N.prop('sdc_time')
    temperature = N.prop('temperature')
    time_mode = N.prop('time_mode')
    zd = N.prop('zd')



class CcsSimConfig(EltDevice.Config):
    Cfg = CcsSimCfgConfig 
    Ctrl = CcsSimCtrlConfig 
    Rpc = CcsSimRpcsConfig 
    Stat = CcsSimStatConfig 
    type = 'CcsSim'
    cfg : RD[Cfg] = Cfg() 
    ctrl : RD[Ctrl] = Ctrl() 
    rpc : RD[Rpc] = Rpc() 
    stat : RD[Stat] = Stat() 


class CcsSimData(EltDevice.Data):
    Cfg = CcsSimCfgData 
    Ctrl = CcsSimCtrlData 
    Rpc = CcsSimRpcsData 
    Stat = CcsSimStatData 
    cfg : Cfg = Cfg() 
    ctrl : Ctrl = Ctrl() 
    rpc : Rpc = Rpc() 
    stat : Stat = Stat() 


class _CcsSim(EltDevice):
    Cfg = CcsSimCfg 
    Ctrl = CcsSimCtrl 
    Rpc = CcsSimRpcs 
    Stat = CcsSimStat 
    Config = CcsSimConfig


    cfg = Cfg.prop('cfg')
    ctrl = Ctrl.prop('ctrl')
    rpc = Rpc.prop('rpc')
    stat = Stat.prop('stat')
