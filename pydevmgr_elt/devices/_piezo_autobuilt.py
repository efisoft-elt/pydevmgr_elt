
# This file was autogenerated do not Edit !!!!!!
# instead import and subclass the Device class 

from pydevmgr_elt.base import EltDevice
from pydevmgr_core import Defaults as RD
from pydevmgr_core import NodeVar
from typing import Any 

N = EltDevice.Node

CN = EltDevice.Node.Config
CI = EltDevice.Interface.Config
CR = EltDevice.Rpc.Config


class PiezoCfgConfig(EltDevice.Cfg.Config):
    full_range1: RD[CN] = CN(suffix='cfg.nFullRange[0].nValue', parser='UaInt16')
    full_range2: RD[CN] = CN(suffix='cfg.nFullRange[1].nValue', parser='UaInt16')
    full_range3: RD[CN] = CN(suffix='cfg.nFullRange[2].nValue', parser='UaInt16')
    home1: RD[CN] = CN(suffix='cfg.nHome[0].nValue', parser='UaInt16')
    home2: RD[CN] = CN(suffix='cfg.nHome[1].nValue', parser='UaInt16')
    home3: RD[CN] = CN(suffix='cfg.nHome[2].nValue', parser='UaInt16')
    lower_limit1: RD[CN] = CN(suffix='cfg.nLimitLow[0].nValue', parser='UaInt16')
    lower_limit2: RD[CN] = CN(suffix='cfg.nLimitLow[1].nValue', parser='UaInt16')
    lower_limit3: RD[CN] = CN(suffix='cfg.nLimitLow[2].nValue', parser='UaInt16')
    max_on: RD[CN] = CN(suffix='cfg.nMaxOn', parser='UaInt32')
    num_axis: RD[CN] = CN(suffix='cfg.nNumAxes', parser='UaInt16')
    upper_limit1: RD[CN] = CN(suffix='cfg.nLimitHigh[0].nValue', parser='UaInt16')
    upper_limit2: RD[CN] = CN(suffix='cfg.nLimitHigh[1].nValue', parser='UaInt16')
    upper_limit3: RD[CN] = CN(suffix='cfg.nLimitHigh[2].nValue', parser='UaInt16')
    user_offset_input1: RD[CN] = CN(suffix='cfg.nUserOffsetBit_Get[0].nValue', parser='UaInt16')
    user_offset_input2: RD[CN] = CN(suffix='cfg.nUserOffsetBit_Get[1].nValue', parser='UaInt16')
    user_offset_input3: RD[CN] = CN(suffix='cfg.nUserOffsetBit_Get[2].nValue', parser='UaInt16')
    user_offset_output1: RD[CN] = CN(suffix='cfg.nUserOffsetBit_Set[0].nValue', parser='UaInt16')
    user_offset_output2: RD[CN] = CN(suffix='cfg.nUserOffsetBit_Set[1].nValue', parser='UaInt16')
    user_offset_output3: RD[CN] = CN(suffix='cfg.nUserOffsetBit_Set[2].nValue', parser='UaInt16')
    user_to_bit_input1: RD[CN] = CN(suffix='cfg.lrUser2Bit_Get[0].lrValue' )
    user_to_bit_input2: RD[CN] = CN(suffix='cfg.lrUser2Bit_Get[1].lrValue' )
    user_to_bit_input3: RD[CN] = CN(suffix='cfg.lrUser2Bit_Get[2].lrValue' )
    user_to_bit_output1: RD[CN] = CN(suffix='cfg.lrUser2Bit_Set[0].lrValue' )
    user_to_bit_output2: RD[CN] = CN(suffix='cfg.lrUser2Bit_Set[1].lrValue' )
    user_to_bit_output3: RD[CN] = CN(suffix='cfg.lrUser2Bit_Set[2].lrValue' )



class PiezoCfgData(EltDevice.Cfg.Data):
    full_range1: NodeVar[int] = 0
    full_range2: NodeVar[int] = 0
    full_range3: NodeVar[int] = 0
    home1: NodeVar[int] = 0
    home2: NodeVar[int] = 0
    home3: NodeVar[int] = 0
    lower_limit1: NodeVar[int] = 0
    lower_limit2: NodeVar[int] = 0
    lower_limit3: NodeVar[int] = 0
    max_on: NodeVar[int] = 0
    num_axis: NodeVar[int] = 0
    upper_limit1: NodeVar[int] = 0
    upper_limit2: NodeVar[int] = 0
    upper_limit3: NodeVar[int] = 0
    user_offset_input1: NodeVar[int] = 0
    user_offset_input2: NodeVar[int] = 0
    user_offset_input3: NodeVar[int] = 0
    user_offset_output1: NodeVar[int] = 0
    user_offset_output2: NodeVar[int] = 0
    user_offset_output3: NodeVar[int] = 0
    user_to_bit_input1: NodeVar[float] = 0.0
    user_to_bit_input2: NodeVar[float] = 0.0
    user_to_bit_input3: NodeVar[float] = 0.0
    user_to_bit_output1: NodeVar[float] = 0.0
    user_to_bit_output2: NodeVar[float] = 0.0
    user_to_bit_output3: NodeVar[float] = 0.0


class PiezoCfg(EltDevice.Cfg):
    Config = PiezoCfgConfig
    Data = PiezoCfgData
    full_range1 = N.prop('full_range1')
    full_range2 = N.prop('full_range2')
    full_range3 = N.prop('full_range3')
    home1 = N.prop('home1')
    home2 = N.prop('home2')
    home3 = N.prop('home3')
    lower_limit1 = N.prop('lower_limit1')
    lower_limit2 = N.prop('lower_limit2')
    lower_limit3 = N.prop('lower_limit3')
    max_on = N.prop('max_on')
    num_axis = N.prop('num_axis')
    upper_limit1 = N.prop('upper_limit1')
    upper_limit2 = N.prop('upper_limit2')
    upper_limit3 = N.prop('upper_limit3')
    user_offset_input1 = N.prop('user_offset_input1')
    user_offset_input2 = N.prop('user_offset_input2')
    user_offset_input3 = N.prop('user_offset_input3')
    user_offset_output1 = N.prop('user_offset_output1')
    user_offset_output2 = N.prop('user_offset_output2')
    user_offset_output3 = N.prop('user_offset_output3')
    user_to_bit_input1 = N.prop('user_to_bit_input1')
    user_to_bit_input2 = N.prop('user_to_bit_input2')
    user_to_bit_input3 = N.prop('user_to_bit_input3')
    user_to_bit_output1 = N.prop('user_to_bit_output1')
    user_to_bit_output2 = N.prop('user_to_bit_output2')
    user_to_bit_output3 = N.prop('user_to_bit_output3')



class PiezoRpcsConfig(EltDevice.Rpcs.Config):
    rpcAuto: RD[CR] = CR(suffix= 'RPC_Auto')
    rpcDisable: RD[CR] = CR(suffix= 'RPC_Disable')
    rpcEnable: RD[CR] = CR(suffix= 'RPC_Enable')
    rpcHome: RD[CR] = CR(suffix= 'RPC_Home')
    rpcInit: RD[CR] = CR(suffix= 'RPC_Init')
    rpcMoveBits: RD[CR] = CR(suffix= 'RPC_MoveBit', arg_parsers=['UaInt16', 'UaInt16', 'UaInt16'] )
    rpcMoveUser: RD[CR] = CR(suffix= 'RPC_MoveUser', arg_parsers=['Float', 'Float', 'Float'] )
    rpcPos: RD[CR] = CR(suffix= 'RPC_Pos')
    rpcReset: RD[CR] = CR(suffix= 'RPC_Reset')
    rpcStop: RD[CR] = CR(suffix= 'RPC_Stop')



class PiezoRpcsData(EltDevice.Rpcs.Data):
    pass


class PiezoRpcs(EltDevice.Rpcs):
    Config = PiezoRpcsConfig
    Data = PiezoRpcsData



class PiezoStatConfig(EltDevice.Stat.Config):
    actual_pos_bit1: RD[CN] = CN(suffix='stat.nActPosBit[0].nValue' )
    actual_pos_bit2: RD[CN] = CN(suffix='stat.nActPosBit[1].nValue' )
    actual_pos_bit3: RD[CN] = CN(suffix='stat.nActPosBit[2].nValue' )
    actual_pos_user1: RD[CN] = CN(suffix='stat.lrActPosUsr[0].lrValue' )
    actual_pos_user2: RD[CN] = CN(suffix='stat.lrActPosUsr[1].lrValue' )
    actual_pos_user3: RD[CN] = CN(suffix='stat.lrActPosUsr[2].lrValue' )
    error_code: RD[CN] = CN(suffix='stat.nErrorCode' )
    local: RD[CN] = CN(suffix='stat.bLocal' )
    mon_act_pos_bit1: RD[CN] = CN(suffix='stat.monSetPosBit_0' )
    mon_act_pos_bit2: RD[CN] = CN(suffix='stat.monSetPosBit_1' )
    mon_act_pos_bit3: RD[CN] = CN(suffix='stat.monSetPosBit_2' )
    mon_act_pos_usr1: RD[CN] = CN(suffix='stat.monActPosUsr_0' )
    mon_act_pos_usr2: RD[CN] = CN(suffix='stat.monActPosUsr_1' )
    mon_act_pos_usr3: RD[CN] = CN(suffix='stat.monActPosUsr_2' )
    state: RD[CN] = CN(suffix='stat.nState' )
    substate: RD[CN] = CN(suffix='stat.nSubstate' )



class PiezoStatData(EltDevice.Stat.Data):
    actual_pos_bit1: NodeVar[int] = 0
    actual_pos_bit2: NodeVar[int] = 0
    actual_pos_bit3: NodeVar[int] = 0
    actual_pos_user1: NodeVar[float] = 0.0
    actual_pos_user2: NodeVar[float] = 0.0
    actual_pos_user3: NodeVar[float] = 0.0
    error_code: NodeVar[int] = 0
    local: NodeVar[bool] = False
    mon_act_pos_bit1: NodeVar[Any] = None
    mon_act_pos_bit2: NodeVar[Any] = None
    mon_act_pos_bit3: NodeVar[Any] = None
    mon_act_pos_usr1: NodeVar[Any] = None
    mon_act_pos_usr2: NodeVar[Any] = None
    mon_act_pos_usr3: NodeVar[Any] = None
    state: NodeVar[int] = 0
    substate: NodeVar[int] = 0


class PiezoStat(EltDevice.Stat):
    Config = PiezoStatConfig
    Data = PiezoStatData
    actual_pos_bit1 = N.prop('actual_pos_bit1')
    actual_pos_bit2 = N.prop('actual_pos_bit2')
    actual_pos_bit3 = N.prop('actual_pos_bit3')
    actual_pos_user1 = N.prop('actual_pos_user1')
    actual_pos_user2 = N.prop('actual_pos_user2')
    actual_pos_user3 = N.prop('actual_pos_user3')
    error_code = N.prop('error_code')
    local = N.prop('local')
    mon_act_pos_bit1 = N.prop('mon_act_pos_bit1')
    mon_act_pos_bit2 = N.prop('mon_act_pos_bit2')
    mon_act_pos_bit3 = N.prop('mon_act_pos_bit3')
    mon_act_pos_usr1 = N.prop('mon_act_pos_usr1')
    mon_act_pos_usr2 = N.prop('mon_act_pos_usr2')
    mon_act_pos_usr3 = N.prop('mon_act_pos_usr3')
    state = N.prop('state')
    substate = N.prop('substate')



class PiezoConfig(EltDevice.Config):
    Cfg = PiezoCfgConfig 
    Rpc = PiezoRpcsConfig 
    Stat = PiezoStatConfig 
    type = 'Piezo'
    cfg : RD[Cfg] = Cfg() 
    rpc : RD[Rpc] = Rpc() 
    stat : RD[Stat] = Stat() 


class PiezoData(EltDevice.Data):
    Cfg = PiezoCfgData 
    Rpc = PiezoRpcsData 
    Stat = PiezoStatData 
    cfg : Cfg = Cfg() 
    rpc : Rpc = Rpc() 
    stat : Stat = Stat() 


class _Piezo(EltDevice):
    Cfg = PiezoCfg 
    Rpc = PiezoRpcs 
    Stat = PiezoStat 
    Config = PiezoConfig


    cfg = Cfg.prop('cfg')
    rpc = Rpc.prop('rpc')
    stat = Stat.prop('stat')
