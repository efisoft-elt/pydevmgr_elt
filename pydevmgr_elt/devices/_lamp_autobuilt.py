
# This file was autogenerated do not Edit !!!!!!
# instead import and subclass the Device class 

from pydevmgr_elt.base import EltDevice
from pydevmgr_core import Defaults as RD
from pydevmgr_core import NodeVar
from typing import Any 

N = EltDevice.Node

CN = EltDevice.Node.Config
CI = EltDevice.Interface.Config
CR = EltDevice.Rpc.Config


class LampCfgConfig(EltDevice.Cfg.Config):
    analog_range: RD[CN] = CN(suffix='cfg.nFullRange', parser='UaUInt32')
    analog_threshold: RD[CN] = CN(suffix='cfg.nAnalogThreshold', parser='UaInt32')
    cooldown: RD[CN] = CN(suffix='cfg.nCooldown', parser='UaUInt32')
    ignore_fault: RD[CN] = CN(suffix='cfg.bIgnoreFault' )
    initial_state: RD[CN] = CN(suffix='cfg.bInitialState' )
    invert_analog: RD[CN] = CN(suffix='cfg.bInvertAnalog' )
    low_fault: RD[CN] = CN(suffix='cfg.bActiveLowFault' )
    low_on: RD[CN] = CN(suffix='cfg.bActiveLowOn' )
    low_switch: RD[CN] = CN(suffix='cfg.bActiveLowSwitch' )
    maxon: RD[CN] = CN(suffix='cfg.nMaxOn', parser='UaUInt32')
    timeout: RD[CN] = CN(suffix='cfg.nTimeout', parser='UaUInt32')
    warmup: RD[CN] = CN(suffix='cfg.nWarmup', parser='UaUInt32')



class LampCfgData(EltDevice.Cfg.Data):
    analog_range: NodeVar[int] = 0
    analog_threshold: NodeVar[int] = 0
    cooldown: NodeVar[int] = 0
    ignore_fault: NodeVar[bool] = False
    initial_state: NodeVar[bool] = False
    invert_analog: NodeVar[bool] = False
    low_fault: NodeVar[bool] = False
    low_on: NodeVar[bool] = False
    low_switch: NodeVar[bool] = False
    maxon: NodeVar[int] = 0
    timeout: NodeVar[int] = 0
    warmup: NodeVar[int] = 0


class LampCfg(EltDevice.Cfg):
    Config = LampCfgConfig
    Data = LampCfgData
    analog_range = N.prop('analog_range')
    analog_threshold = N.prop('analog_threshold')
    cooldown = N.prop('cooldown')
    ignore_fault = N.prop('ignore_fault')
    initial_state = N.prop('initial_state')
    invert_analog = N.prop('invert_analog')
    low_fault = N.prop('low_fault')
    low_on = N.prop('low_on')
    low_switch = N.prop('low_switch')
    maxon = N.prop('maxon')
    timeout = N.prop('timeout')
    warmup = N.prop('warmup')



class LampRpcsConfig(EltDevice.Rpcs.Config):
    rpcDisable: RD[CR] = CR(suffix= 'RPC_Disable')
    rpcEnable: RD[CR] = CR(suffix= 'RPC_Enable')
    rpcInit: RD[CR] = CR(suffix= 'RPC_Init')
    rpcReset: RD[CR] = CR(suffix= 'RPC_Reset')
    rpcStop: RD[CR] = CR(suffix= 'RPC_Stop')
    rpcSwitchOff: RD[CR] = CR(suffix= 'RPC_Off')
    rpcSwitchOn: RD[CR] = CR(suffix= 'RPC_On', arg_parsers=['Float', 'UaUInt32'] )



class LampRpcsData(EltDevice.Rpcs.Data):
    pass


class LampRpcs(EltDevice.Rpcs):
    Config = LampRpcsConfig
    Data = LampRpcsData



class LampStatConfig(EltDevice.Stat.Config):
    check_time_left: RD[CN] = CN(suffix='stat.bCheckTimeLeft' )
    error_code: RD[CN] = CN(suffix='stat.nErrorCode' )
    intensity: RD[CN] = CN(suffix='stat.lrIntensity' )
    local: RD[CN] = CN(suffix='stat.bLocal' )
    state: RD[CN] = CN(suffix='stat.nState' )
    status: RD[CN] = CN(suffix='stat.nStatus' )
    substate: RD[CN] = CN(suffix='stat.nSubstate' )
    time_left: RD[CN] = CN(suffix='stat.nTimeLeft' )



class LampStatData(EltDevice.Stat.Data):
    check_time_left: NodeVar[bool] = False
    error_code: NodeVar[int] = 0
    intensity: NodeVar[float] = 0.0
    local: NodeVar[bool] = False
    state: NodeVar[int] = 0
    status: NodeVar[int] = 0
    substate: NodeVar[int] = 0
    time_left: NodeVar[int] = 0


class LampStat(EltDevice.Stat):
    Config = LampStatConfig
    Data = LampStatData
    check_time_left = N.prop('check_time_left')
    error_code = N.prop('error_code')
    intensity = N.prop('intensity')
    local = N.prop('local')
    state = N.prop('state')
    status = N.prop('status')
    substate = N.prop('substate')
    time_left = N.prop('time_left')



class LampConfig(EltDevice.Config):
    Cfg = LampCfgConfig 
    Rpc = LampRpcsConfig 
    Stat = LampStatConfig 
    type = 'Lamp'
    cfg : RD[Cfg] = Cfg() 
    rpc : RD[Rpc] = Rpc() 
    stat : RD[Stat] = Stat() 


class LampData(EltDevice.Data):
    Cfg = LampCfgData 
    Rpc = LampRpcsData 
    Stat = LampStatData 
    cfg : Cfg = Cfg() 
    rpc : Rpc = Rpc() 
    stat : Stat = Stat() 


class _Lamp(EltDevice):
    Cfg = LampCfg 
    Rpc = LampRpcs 
    Stat = LampStat 
    Config = LampConfig


    cfg = Cfg.prop('cfg')
    rpc = Rpc.prop('rpc')
    stat = Stat.prop('stat')
