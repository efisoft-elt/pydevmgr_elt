
# This file was autogenerated do not Edit !!!!!!
# instead import and subclass the Device class 

from pydevmgr_elt.base import EltDevice
from pydevmgr_core import Defaults as RD
from pydevmgr_core import NodeVar
from typing import Any 

N = EltDevice.Node

CN = EltDevice.Node.Config
CI = EltDevice.Interface.Config
CR = EltDevice.Rpc.Config


class DrotCfgConfig(EltDevice.Cfg.Config):
    active_low_index: RD[CN] = CN(suffix='motor.cfg.bArrActiveLow[3].bValue' )
    active_low_lhw: RD[CN] = CN(suffix='motor.cfg.bArrActiveLow[1].bValue' )
    active_low_lstop: RD[CN] = CN(suffix='motor.cfg.bArrActiveLow[0].bValue' )
    active_low_ref: RD[CN] = CN(suffix='motor.cfg.bArrActiveLow[2].bValue' )
    active_low_uhw: RD[CN] = CN(suffix='motor.cfg.bArrActiveLow[4].bValue' )
    active_low_ustop: RD[CN] = CN(suffix='motor.cfg.bArrActiveLow[5].bValue' )
    axis_type: RD[CN] = CN(suffix='motor.cfg.nAxisType' )
    backlash: RD[CN] = CN(suffix='motor.cfg.lrBacklash' )
    brake: RD[CN] = CN(suffix='motor.cfg.bUseBrake' )
    check_inpos: RD[CN] = CN(suffix='motor.cfg.bCheckInPos' )
    dir_sign: RD[CN] = CN(suffix='cfg.nDirSign', parser='UaInt32')
    disable: RD[CN] = CN(suffix='motor.cfg.bDisableAfterMove' )
    elev_ref: RD[CN] = CN(suffix='cfg.lrElevRef' )
    exec_post_init: RD[CN] = CN(suffix='motor.cfg.bExecUserPostInit' )
    exec_post_move: RD[CN] = CN(suffix='motor.cfg.bExecUserPostMove' )
    exec_pre_init: RD[CN] = CN(suffix='motor.cfg.bExecUserPreInit' )
    exec_pre_move: RD[CN] = CN(suffix='motor.cfg.bExecUserPreMove' )
    focus_sign: RD[CN] = CN(suffix='cfg.nFocusSign', parser='UaInt32')
    init_seq10_action: RD[CN] = CN(suffix='motor.cfg.strArrInitSeq[10].nAction' )
    init_seq10_value1: RD[CN] = CN(suffix='motor.cfg.strArrInitSeq[10].lrValue1' )
    init_seq10_value2: RD[CN] = CN(suffix='motor.cfg.strArrInitSeq[10].lrValue2' )
    init_seq1_action: RD[CN] = CN(suffix='motor.cfg.strArrInitSeq[1].nAction' )
    init_seq1_value1: RD[CN] = CN(suffix='motor.cfg.strArrInitSeq[1].lrValue1' )
    init_seq1_value2: RD[CN] = CN(suffix='motor.cfg.strArrInitSeq[1].lrValue2' )
    init_seq2_action: RD[CN] = CN(suffix='motor.cfg.strArrInitSeq[2].nAction' )
    init_seq2_value1: RD[CN] = CN(suffix='motor.cfg.strArrInitSeq[2].lrValue1' )
    init_seq2_value2: RD[CN] = CN(suffix='motor.cfg.strArrInitSeq[2].lrValue2' )
    init_seq3_action: RD[CN] = CN(suffix='motor.cfg.strArrInitSeq[3].nAction' )
    init_seq3_value1: RD[CN] = CN(suffix='motor.cfg.strArrInitSeq[3].lrValue1' )
    init_seq3_value2: RD[CN] = CN(suffix='motor.cfg.strArrInitSeq[3].lrValue2' )
    init_seq4_action: RD[CN] = CN(suffix='motor.cfg.strArrInitSeq[4].nAction' )
    init_seq4_value1: RD[CN] = CN(suffix='motor.cfg.strArrInitSeq[4].lrValue1' )
    init_seq4_value2: RD[CN] = CN(suffix='motor.cfg.strArrInitSeq[4].lrValue2' )
    init_seq5_action: RD[CN] = CN(suffix='motor.cfg.strArrInitSeq[5].nAction' )
    init_seq5_value1: RD[CN] = CN(suffix='motor.cfg.strArrInitSeq[5].lrValue1' )
    init_seq5_value2: RD[CN] = CN(suffix='motor.cfg.strArrInitSeq[5].lrValue2' )
    init_seq6_action: RD[CN] = CN(suffix='motor.cfg.strArrInitSeq[6].nAction' )
    init_seq6_value1: RD[CN] = CN(suffix='motor.cfg.strArrInitSeq[6].lrValue1' )
    init_seq6_value2: RD[CN] = CN(suffix='motor.cfg.strArrInitSeq[6].lrValue2' )
    init_seq7_action: RD[CN] = CN(suffix='motor.cfg.strArrInitSeq[7].nAction' )
    init_seq7_value1: RD[CN] = CN(suffix='motor.cfg.strArrInitSeq[7].lrValue1' )
    init_seq7_value2: RD[CN] = CN(suffix='motor.cfg.strArrInitSeq[7].lrValue2' )
    init_seq8_action: RD[CN] = CN(suffix='motor.cfg.strArrInitSeq[8].nAction' )
    init_seq8_value1: RD[CN] = CN(suffix='motor.cfg.strArrInitSeq[8].lrValue1' )
    init_seq8_value2: RD[CN] = CN(suffix='motor.cfg.strArrInitSeq[8].lrValue2' )
    init_seq9_action: RD[CN] = CN(suffix='motor.cfg.strArrInitSeq[9].nAction' )
    init_seq9_value1: RD[CN] = CN(suffix='motor.cfg.strArrInitSeq[9].lrValue1' )
    init_seq9_value2: RD[CN] = CN(suffix='motor.cfg.strArrInitSeq[9].lrValue2' )
    latitude: RD[CN] = CN(suffix='cfg.site.latitude' )
    lock: RD[CN] = CN(suffix='motor.cfg.bLock' )
    lock_pos: RD[CN] = CN(suffix='motor.cfg.lrLockPos' )
    lock_tolerance: RD[CN] = CN(suffix='motor.cfg.lrLockTol' )
    longitude: RD[CN] = CN(suffix='cfg.site.longitude' )
    low_brake: RD[CN] = CN(suffix='motor.cfg.bActiveLowBrake' )
    low_inpos: RD[CN] = CN(suffix='motor.cfg.bActiveLowInPos' )
    max_pos: RD[CN] = CN(suffix='motor.cfg.lrMaxPosition' )
    min_pos: RD[CN] = CN(suffix='motor.cfg.lrMinPosition' )
    sky_ref: RD[CN] = CN(suffix='cfg.lrSkyRef' )
    stat_ref: RD[CN] = CN(suffix='cfg.lrStatRef' )
    tout_init: RD[CN] = CN(suffix='motor.cfg.nTimeoutInit' )
    tout_move: RD[CN] = CN(suffix='motor.cfg.nTimeoutMove' )
    tout_switch: RD[CN] = CN(suffix='motor.cfg.nTimeoutSwitch' )
    trk_period: RD[CN] = CN(suffix='cfg.nMinSkipCycles', parser='UaInt32')
    trk_threshold: RD[CN] = CN(suffix='cfg.lrTrkThreshold' )
    user_par1: RD[CN] = CN(suffix='cfg.lrUserPar1' )
    user_par2: RD[CN] = CN(suffix='cfg.lrUserPar2' )
    user_par3: RD[CN] = CN(suffix='cfg.lrUserPar3' )
    user_par4: RD[CN] = CN(suffix='cfg.lrUserPar4' )
    user_ref: RD[CN] = CN(suffix='cfg.lrUserRef' )
    velocity: RD[CN] = CN(suffix='motor.cfg.lrDefaultVelocity' )



class DrotCfgData(EltDevice.Cfg.Data):
    active_low_index: NodeVar[bool] = False
    active_low_lhw: NodeVar[bool] = False
    active_low_lstop: NodeVar[bool] = False
    active_low_ref: NodeVar[bool] = False
    active_low_uhw: NodeVar[bool] = False
    active_low_ustop: NodeVar[bool] = False
    axis_type: NodeVar[int] = 0
    backlash: NodeVar[float] = 0.0
    brake: NodeVar[bool] = False
    check_inpos: NodeVar[bool] = False
    dir_sign: NodeVar[int] = 0
    disable: NodeVar[bool] = False
    elev_ref: NodeVar[float] = 0.0
    exec_post_init: NodeVar[bool] = False
    exec_post_move: NodeVar[bool] = False
    exec_pre_init: NodeVar[bool] = False
    exec_pre_move: NodeVar[bool] = False
    focus_sign: NodeVar[int] = 0
    init_seq10_action: NodeVar[int] = 0
    init_seq10_value1: NodeVar[float] = 0.0
    init_seq10_value2: NodeVar[float] = 0.0
    init_seq1_action: NodeVar[int] = 0
    init_seq1_value1: NodeVar[float] = 0.0
    init_seq1_value2: NodeVar[float] = 0.0
    init_seq2_action: NodeVar[int] = 0
    init_seq2_value1: NodeVar[float] = 0.0
    init_seq2_value2: NodeVar[float] = 0.0
    init_seq3_action: NodeVar[int] = 0
    init_seq3_value1: NodeVar[float] = 0.0
    init_seq3_value2: NodeVar[float] = 0.0
    init_seq4_action: NodeVar[int] = 0
    init_seq4_value1: NodeVar[float] = 0.0
    init_seq4_value2: NodeVar[float] = 0.0
    init_seq5_action: NodeVar[int] = 0
    init_seq5_value1: NodeVar[float] = 0.0
    init_seq5_value2: NodeVar[float] = 0.0
    init_seq6_action: NodeVar[int] = 0
    init_seq6_value1: NodeVar[float] = 0.0
    init_seq6_value2: NodeVar[float] = 0.0
    init_seq7_action: NodeVar[int] = 0
    init_seq7_value1: NodeVar[float] = 0.0
    init_seq7_value2: NodeVar[float] = 0.0
    init_seq8_action: NodeVar[int] = 0
    init_seq8_value1: NodeVar[float] = 0.0
    init_seq8_value2: NodeVar[float] = 0.0
    init_seq9_action: NodeVar[int] = 0
    init_seq9_value1: NodeVar[float] = 0.0
    init_seq9_value2: NodeVar[float] = 0.0
    latitude: NodeVar[Any] = None
    lock: NodeVar[bool] = False
    lock_pos: NodeVar[float] = 0.0
    lock_tolerance: NodeVar[float] = 0.0
    longitude: NodeVar[Any] = None
    low_brake: NodeVar[bool] = False
    low_inpos: NodeVar[bool] = False
    max_pos: NodeVar[float] = 0.0
    min_pos: NodeVar[float] = 0.0
    sky_ref: NodeVar[float] = 0.0
    stat_ref: NodeVar[float] = 0.0
    tout_init: NodeVar[int] = 0
    tout_move: NodeVar[int] = 0
    tout_switch: NodeVar[int] = 0
    trk_period: NodeVar[int] = 0
    trk_threshold: NodeVar[float] = 0.0
    user_par1: NodeVar[float] = 0.0
    user_par2: NodeVar[float] = 0.0
    user_par3: NodeVar[float] = 0.0
    user_par4: NodeVar[float] = 0.0
    user_ref: NodeVar[float] = 0.0
    velocity: NodeVar[float] = 0.0


class DrotCfg(EltDevice.Cfg):
    Config = DrotCfgConfig
    Data = DrotCfgData
    active_low_index = N.prop('active_low_index')
    active_low_lhw = N.prop('active_low_lhw')
    active_low_lstop = N.prop('active_low_lstop')
    active_low_ref = N.prop('active_low_ref')
    active_low_uhw = N.prop('active_low_uhw')
    active_low_ustop = N.prop('active_low_ustop')
    axis_type = N.prop('axis_type')
    backlash = N.prop('backlash')
    brake = N.prop('brake')
    check_inpos = N.prop('check_inpos')
    dir_sign = N.prop('dir_sign')
    disable = N.prop('disable')
    elev_ref = N.prop('elev_ref')
    exec_post_init = N.prop('exec_post_init')
    exec_post_move = N.prop('exec_post_move')
    exec_pre_init = N.prop('exec_pre_init')
    exec_pre_move = N.prop('exec_pre_move')
    focus_sign = N.prop('focus_sign')
    init_seq10_action = N.prop('init_seq10_action')
    init_seq10_value1 = N.prop('init_seq10_value1')
    init_seq10_value2 = N.prop('init_seq10_value2')
    init_seq1_action = N.prop('init_seq1_action')
    init_seq1_value1 = N.prop('init_seq1_value1')
    init_seq1_value2 = N.prop('init_seq1_value2')
    init_seq2_action = N.prop('init_seq2_action')
    init_seq2_value1 = N.prop('init_seq2_value1')
    init_seq2_value2 = N.prop('init_seq2_value2')
    init_seq3_action = N.prop('init_seq3_action')
    init_seq3_value1 = N.prop('init_seq3_value1')
    init_seq3_value2 = N.prop('init_seq3_value2')
    init_seq4_action = N.prop('init_seq4_action')
    init_seq4_value1 = N.prop('init_seq4_value1')
    init_seq4_value2 = N.prop('init_seq4_value2')
    init_seq5_action = N.prop('init_seq5_action')
    init_seq5_value1 = N.prop('init_seq5_value1')
    init_seq5_value2 = N.prop('init_seq5_value2')
    init_seq6_action = N.prop('init_seq6_action')
    init_seq6_value1 = N.prop('init_seq6_value1')
    init_seq6_value2 = N.prop('init_seq6_value2')
    init_seq7_action = N.prop('init_seq7_action')
    init_seq7_value1 = N.prop('init_seq7_value1')
    init_seq7_value2 = N.prop('init_seq7_value2')
    init_seq8_action = N.prop('init_seq8_action')
    init_seq8_value1 = N.prop('init_seq8_value1')
    init_seq8_value2 = N.prop('init_seq8_value2')
    init_seq9_action = N.prop('init_seq9_action')
    init_seq9_value1 = N.prop('init_seq9_value1')
    init_seq9_value2 = N.prop('init_seq9_value2')
    latitude = N.prop('latitude')
    lock = N.prop('lock')
    lock_pos = N.prop('lock_pos')
    lock_tolerance = N.prop('lock_tolerance')
    longitude = N.prop('longitude')
    low_brake = N.prop('low_brake')
    low_inpos = N.prop('low_inpos')
    max_pos = N.prop('max_pos')
    min_pos = N.prop('min_pos')
    sky_ref = N.prop('sky_ref')
    stat_ref = N.prop('stat_ref')
    tout_init = N.prop('tout_init')
    tout_move = N.prop('tout_move')
    tout_switch = N.prop('tout_switch')
    trk_period = N.prop('trk_period')
    trk_threshold = N.prop('trk_threshold')
    user_par1 = N.prop('user_par1')
    user_par2 = N.prop('user_par2')
    user_par3 = N.prop('user_par3')
    user_par4 = N.prop('user_par4')
    user_ref = N.prop('user_ref')
    velocity = N.prop('velocity')



class DrotRpcsConfig(EltDevice.Rpcs.Config):
    pass



class DrotRpcsData(EltDevice.Rpcs.Data):
    pass


class DrotRpcs(EltDevice.Rpcs):
    Config = DrotRpcsConfig
    Data = DrotRpcsData



class DrotStatConfig(EltDevice.Stat.Config):
    alpha: RD[CN] = CN(suffix='stat.apparent.alpha' )
    angle_on_sky: RD[CN] = CN(suffix='stat.lrAngleOnSky' )
    axis_brake: RD[CN] = CN(suffix='motor.stat.bBrakeActive' )
    axis_enable: RD[CN] = CN(suffix='motor.stat.bEnabled' )
    axis_info_data1: RD[CN] = CN(suffix='motor.stat.nInfoData1' )
    axis_info_data2: RD[CN] = CN(suffix='motor.stat.nInfoData2' )
    axis_inposition: RD[CN] = CN(suffix='motor.stat.bInPosition' )
    axis_lock: RD[CN] = CN(suffix='motor.stat.bLock' )
    axis_ready: RD[CN] = CN(suffix='motor.stat.bAxisReady' )
    backlash_step: RD[CN] = CN(suffix='motor.stat.nBacklashStep' )
    delta: RD[CN] = CN(suffix='stat.apparent.delta' )
    error_code: RD[CN] = CN(suffix='motor.stat.nErrorCode' )
    init_action: RD[CN] = CN(suffix='motor.stat.nInitAction' )
    init_step: RD[CN] = CN(suffix='motor.stat.nInitStep' )
    initialised: RD[CN] = CN(suffix='stat.bInitialised' )
    local: RD[CN] = CN(suffix='motor.stat.bLocal' )
    mode: RD[CN] = CN(suffix='motor.stat.nMode' )
    pos_actual: RD[CN] = CN(suffix='motor.stat.lrPosActual' )
    pos_error: RD[CN] = CN(suffix='motor.stat.lrPosError' )
    pos_target: RD[CN] = CN(suffix='motor.stat.lrPosTarget' )
    scale_factor: RD[CN] = CN(suffix='motor.stat.lrScaleFactor' )
    signal_index: RD[CN] = CN(suffix='motor.stat.signals[3].bActive' )
    signal_lhw: RD[CN] = CN(suffix='motor.stat.signals[1].bActive' )
    signal_lstop: RD[CN] = CN(suffix='motor.stat.signals[0].bActive' )
    signal_ref: RD[CN] = CN(suffix='motor.stat.signals[2].bActive' )
    signal_uhw: RD[CN] = CN(suffix='motor.stat.signals[4].bActive' )
    signal_ustop: RD[CN] = CN(suffix='motor.stat.signals[5].bActive' )
    state: RD[CN] = CN(suffix='stat.sm.nState' )
    status: RD[CN] = CN(suffix='motor.stat.nStatus' )
    substate: RD[CN] = CN(suffix='stat.sm.nSubstate' )
    track_mode: RD[CN] = CN(suffix='stat.nMode' )
    vel_actual: RD[CN] = CN(suffix='motor.stat.lrVelActual' )



class DrotStatData(EltDevice.Stat.Data):
    alpha: NodeVar[Any] = None
    angle_on_sky: NodeVar[float] = 0.0
    axis_brake: NodeVar[bool] = False
    axis_enable: NodeVar[bool] = False
    axis_info_data1: NodeVar[int] = 0
    axis_info_data2: NodeVar[int] = 0
    axis_inposition: NodeVar[bool] = False
    axis_lock: NodeVar[bool] = False
    axis_ready: NodeVar[bool] = False
    backlash_step: NodeVar[int] = 0
    delta: NodeVar[Any] = None
    error_code: NodeVar[int] = 0
    init_action: NodeVar[int] = 0
    init_step: NodeVar[int] = 0
    initialised: NodeVar[bool] = False
    local: NodeVar[bool] = False
    mode: NodeVar[int] = 0
    pos_actual: NodeVar[float] = 0.0
    pos_error: NodeVar[float] = 0.0
    pos_target: NodeVar[float] = 0.0
    scale_factor: NodeVar[float] = 0.0
    signal_index: NodeVar[bool] = False
    signal_lhw: NodeVar[bool] = False
    signal_lstop: NodeVar[bool] = False
    signal_ref: NodeVar[bool] = False
    signal_uhw: NodeVar[bool] = False
    signal_ustop: NodeVar[bool] = False
    state: NodeVar[int] = 0
    status: NodeVar[int] = 0
    substate: NodeVar[int] = 0
    track_mode: NodeVar[int] = 0
    vel_actual: NodeVar[float] = 0.0


class DrotStat(EltDevice.Stat):
    Config = DrotStatConfig
    Data = DrotStatData
    alpha = N.prop('alpha')
    angle_on_sky = N.prop('angle_on_sky')
    axis_brake = N.prop('axis_brake')
    axis_enable = N.prop('axis_enable')
    axis_info_data1 = N.prop('axis_info_data1')
    axis_info_data2 = N.prop('axis_info_data2')
    axis_inposition = N.prop('axis_inposition')
    axis_lock = N.prop('axis_lock')
    axis_ready = N.prop('axis_ready')
    backlash_step = N.prop('backlash_step')
    delta = N.prop('delta')
    error_code = N.prop('error_code')
    init_action = N.prop('init_action')
    init_step = N.prop('init_step')
    initialised = N.prop('initialised')
    local = N.prop('local')
    mode = N.prop('mode')
    pos_actual = N.prop('pos_actual')
    pos_error = N.prop('pos_error')
    pos_target = N.prop('pos_target')
    scale_factor = N.prop('scale_factor')
    signal_index = N.prop('signal_index')
    signal_lhw = N.prop('signal_lhw')
    signal_lstop = N.prop('signal_lstop')
    signal_ref = N.prop('signal_ref')
    signal_uhw = N.prop('signal_uhw')
    signal_ustop = N.prop('signal_ustop')
    state = N.prop('state')
    status = N.prop('status')
    substate = N.prop('substate')
    track_mode = N.prop('track_mode')
    vel_actual = N.prop('vel_actual')



class DrotConfig(EltDevice.Config):
    Cfg = DrotCfgConfig 
    Rpc = DrotRpcsConfig 
    Stat = DrotStatConfig 
    type = 'Drot'
    cfg : RD[Cfg] = Cfg() 
    rpc : RD[Rpc] = Rpc() 
    stat : RD[Stat] = Stat() 


class DrotData(EltDevice.Data):
    Cfg = DrotCfgData 
    Rpc = DrotRpcsData 
    Stat = DrotStatData 
    cfg : Cfg = Cfg() 
    rpc : Rpc = Rpc() 
    stat : Stat = Stat() 


class _Drot(EltDevice):
    Cfg = DrotCfg 
    Rpc = DrotRpcs 
    Stat = DrotStat 
    Config = DrotConfig


    cfg = Cfg.prop('cfg')
    rpc = Rpc.prop('rpc')
    stat = Stat.prop('stat')
